# OASIS_START
# DO NOT EDIT (digest: 285c1c9ad0a7f3fbc3d76dd1c84aa230)
# Ignore VCS directories, you can use the same kind of rule outside 
# OASIS_START/STOP if you want to exclude directories that contains 
# useless stuff for the build process
<**/.svn>: -traverse
<**/.svn>: not_hygienic
".bzr": -traverse
".bzr": not_hygienic
".hg": -traverse
".hg": not_hygienic
".git": -traverse
".git": not_hygienic
"_darcs": -traverse
"_darcs": not_hygienic
# Library cabs
"src/cabs/cabs.cmxs": use_cabs
"src/cabs/ml/ast.cmx": for-pack(Cabs)
"src/cabs/ml/constant.cmx": for-pack(Cabs)
"src/cabs/ml/sclass.cmx": for-pack(Cabs)
"src/cabs/ml/tqual.cmx": for-pack(Cabs)
<src/cabs/*.ml{,i}>: pkg_batteries
<src/cabs/*.ml{,i}>: pkg_sexplib
<src/cabs/ml/*.ml{,i}>: pkg_batteries
<src/cabs/ml/*.ml{,i}>: pkg_sexplib
# Library ccabs
"src/ccabs/ccabs.cmxs": use_ccabs
"src/ccabs/ml/ast.cmx": for-pack(Ccabs)
"src/ccabs/ml/disambiguation.cmx": for-pack(Ccabs)
"src/ccabs/ml/flags.cmx": for-pack(Ccabs)
"src/ccabs/ml/query.cmx": for-pack(Ccabs)
<src/ccabs/*.ml{,i}>: pkg_batteries
<src/ccabs/*.ml{,i}>: pkg_sexplib
<src/ccabs/*.ml{,i}>: pkg_monad-custom
<src/ccabs/ml/*.ml{,i}>: pkg_batteries
<src/ccabs/ml/*.ml{,i}>: pkg_sexplib
<src/ccabs/ml/*.ml{,i}>: pkg_monad-custom
# Library baselib
"src/baselib/baselib.cmxs": use_baselib
"src/baselib/baselib.cmxa": oasis_library_baselib_cclib
"src/baselib/libbaselib_stubs.lib": oasis_library_baselib_cclib
"src/baselib/dllbaselib_stubs.dll": oasis_library_baselib_cclib
"src/baselib/libbaselib_stubs.a": oasis_library_baselib_cclib
"src/baselib/dllbaselib_stubs.so": oasis_library_baselib_cclib
"src/baselib/baselib.cmxa": use_libbaselib_stubs
<src/baselib/*.ml{,i}>: pkg_batteries
<src/baselib/*.ml{,i}>: pkg_sexplib
"src/baselib/ml_BitSet.c": pkg_batteries
"src/baselib/ml_BitSet.c": pkg_sexplib
"src/baselib/ml_Sched.c": pkg_batteries
"src/baselib/ml_Sched.c": pkg_sexplib
"src/baselib/ml_Valgrind.c": pkg_batteries
"src/baselib/ml_Valgrind.c": pkg_sexplib
"src/baselib/ml_Zlib.c": pkg_batteries
"src/baselib/ml_Zlib.c": pkg_sexplib
# Library codegen
"src/codegen/codegen.cmxs": use_codegen
<src/codegen/*.ml{,i}>: use_baselib
<src/codegen/*.ml{,i}>: pkg_batteries
<src/codegen/*.ml{,i}>: pkg_camlp4
<src/codegen/*.ml{,i}>: pkg_camlp4.lib
<src/codegen/*.ml{,i}>: pkg_sexplib
# Library glr
"src/glr/glr.cmxs": use_glr
"src/glr/glr_info.cmx": for-pack(Glr)
"src/glr/ml/arraystack.cmx": for-pack(Glr)
"src/glr/ml/objpool.cmx": for-pack(Glr)
"src/glr/ml/options.cmx": for-pack(Glr)
"src/glr/ml/parseTables.cmx": for-pack(Glr)
"src/glr/ml/easy.cmx": for-pack(Glr)
"src/glr/ml/engine.cmx": for-pack(Glr)
"src/glr/ml/lexerint.cmx": for-pack(Glr)
"src/glr/ml/parseTablesType.cmx": for-pack(Glr)
"src/glr/ml/ptreeActions.cmx": for-pack(Glr)
"src/glr/ml/ptreeNode.cmx": for-pack(Glr)
"src/glr/ml/semanticValue.cmx": for-pack(Glr)
"src/glr/ml/sourceLocation.cmx": for-pack(Glr)
"src/glr/ml/tokenInfo.cmx": for-pack(Glr)
"src/glr/ml/userActions.cmx": for-pack(Glr)
<src/glr/*.ml{,i}>: use_baselib
<src/glr/*.ml{,i}>: pkg_batteries
<src/glr/*.ml{,i}>: pkg_sexplib
<src/glr/ml/*.ml{,i}>: use_baselib
<src/glr/ml/*.ml{,i}>: pkg_batteries
<src/glr/ml/*.ml{,i}>: pkg_sexplib
# Executable sless
"testsuite/elkhound/scannerless/sless.native": use_glr
"testsuite/elkhound/scannerless/sless.native": use_baselib
"testsuite/elkhound/scannerless/sless.native": pkg_batteries
"testsuite/elkhound/scannerless/sless.native": pkg_sexplib
<testsuite/elkhound/scannerless/*.ml{,i}>: use_glr
<testsuite/elkhound/scannerless/*.ml{,i}>: use_baselib
<testsuite/elkhound/scannerless/*.ml{,i}>: pkg_batteries
<testsuite/elkhound/scannerless/*.ml{,i}>: pkg_sexplib
# Executable arith
"testsuite/elkhound/arith/arith.native": use_glr
"testsuite/elkhound/arith/arith.native": use_baselib
"testsuite/elkhound/arith/arith.native": pkg_batteries
"testsuite/elkhound/arith/arith.native": pkg_sexplib
<testsuite/elkhound/arith/*.ml{,i}>: use_glr
<testsuite/elkhound/arith/*.ml{,i}>: use_baselib
<testsuite/elkhound/arith/*.ml{,i}>: pkg_batteries
<testsuite/elkhound/arith/*.ml{,i}>: pkg_sexplib
# Library ccparse
"src/ccparse/ccparse.cmxs": use_ccparse
"src/ccparse/ccparse_info.cmx": for-pack(Ccparse)
"src/ccparse/ml/cc_keywords.cmx": for-pack(Ccparse)
"src/ccparse/ml/factory.cmx": for-pack(Ccparse)
"src/ccparse/ml/lexer.cmx": for-pack(Ccparse)
"src/ccparse/ml/options.cmx": for-pack(Ccparse)
"src/ccparse/ml/parser.cmx": for-pack(Ccparse)
<src/ccparse/*.ml{,i}>: use_ccabs
<src/ccparse/*.ml{,i}>: use_glr
<src/ccparse/*.ml{,i}>: use_baselib
<src/ccparse/*.ml{,i}>: pkg_unix
<src/ccparse/*.ml{,i}>: pkg_batteries
<src/ccparse/*.ml{,i}>: pkg_sexplib
<src/ccparse/*.ml{,i}>: pkg_monad-custom
<src/ccparse/gr/*.ml{,i}>: use_ccabs
<src/ccparse/gr/*.ml{,i}>: use_glr
<src/ccparse/gr/*.ml{,i}>: use_baselib
<src/ccparse/gr/*.ml{,i}>: pkg_unix
<src/ccparse/gr/*.ml{,i}>: pkg_batteries
<src/ccparse/gr/*.ml{,i}>: pkg_sexplib
<src/ccparse/gr/*.ml{,i}>: pkg_monad-custom
<src/ccparse/ml/*.ml{,i}>: use_ccabs
<src/ccparse/ml/*.ml{,i}>: use_glr
<src/ccparse/ml/*.ml{,i}>: use_baselib
<src/ccparse/ml/*.ml{,i}>: pkg_unix
<src/ccparse/ml/*.ml{,i}>: pkg_batteries
<src/ccparse/ml/*.ml{,i}>: pkg_sexplib
<src/ccparse/ml/*.ml{,i}>: pkg_monad-custom
<src/ccparse/tok/*.ml{,i}>: use_ccabs
<src/ccparse/tok/*.ml{,i}>: use_glr
<src/ccparse/tok/*.ml{,i}>: use_baselib
<src/ccparse/tok/*.ml{,i}>: pkg_unix
<src/ccparse/tok/*.ml{,i}>: pkg_batteries
<src/ccparse/tok/*.ml{,i}>: pkg_sexplib
<src/ccparse/tok/*.ml{,i}>: pkg_monad-custom
# Executable cpapa
"src/cpapa/cpapa.native": use_ccparse
"src/cpapa/cpapa.native": use_ccabs
"src/cpapa/cpapa.native": use_glr
"src/cpapa/cpapa.native": use_baselib
"src/cpapa/cpapa.native": pkg_unix
"src/cpapa/cpapa.native": pkg_batteries
"src/cpapa/cpapa.native": pkg_sexplib
"src/cpapa/cpapa.native": pkg_monad-custom
<src/cpapa/*.ml{,i}>: use_ccparse
<src/cpapa/*.ml{,i}>: use_ccabs
<src/cpapa/*.ml{,i}>: use_glr
<src/cpapa/*.ml{,i}>: use_baselib
<src/cpapa/*.ml{,i}>: pkg_unix
<src/cpapa/*.ml{,i}>: pkg_batteries
<src/cpapa/*.ml{,i}>: pkg_sexplib
<src/cpapa/*.ml{,i}>: pkg_monad-custom
# Library gramanl
"src/gramanl/gramanl.cmxs": use_gramanl
"src/gramanl/gramanl_info.cmx": for-pack(Gramanl)
"src/gramanl/ml/analysisEnv.cmx": for-pack(Gramanl)
"src/gramanl/ml/analysisEnvType.cmx": for-pack(Gramanl)
"src/gramanl/ml/assoc.cmx": for-pack(Gramanl)
"src/gramanl/ml/backTransform.cmx": for-pack(Gramanl)
"src/gramanl/ml/bfsTree.cmx": for-pack(Gramanl)
"src/gramanl/ml/conflictResolution.cmx": for-pack(Gramanl)
"src/gramanl/ml/derivability.cmx": for-pack(Gramanl)
"src/gramanl/ml/dottedProduction.cmx": for-pack(Gramanl)
"src/gramanl/ml/emitActions.cmx": for-pack(Gramanl)
"src/gramanl/ml/emitCode.cmx": for-pack(Gramanl)
"src/gramanl/ml/emitNames.cmx": for-pack(Gramanl)
"src/gramanl/ml/emitPtree.cmx": for-pack(Gramanl)
"src/gramanl/ml/emitTables.cmx": for-pack(Gramanl)
"src/gramanl/ml/emitTokens.cmx": for-pack(Gramanl)
"src/gramanl/ml/emitTreematch.cmx": for-pack(Gramanl)
"src/gramanl/ml/firstSets.cmx": for-pack(Gramanl)
"src/gramanl/ml/followSets.cmx": for-pack(Gramanl)
"src/gramanl/ml/grammarAnalysis.cmx": for-pack(Gramanl)
"src/gramanl/ml/grammarAst.cmx": for-pack(Gramanl)
"src/gramanl/ml/grammarGraph.cmx": for-pack(Gramanl)
"src/gramanl/ml/grammarIndex.cmx": for-pack(Gramanl)
"src/gramanl/ml/grammarLexer.cmx": for-pack(Gramanl)
"src/gramanl/ml/grammarParser.cmx": for-pack(Gramanl)
"src/gramanl/ml/grammarSig.cmx": for-pack(Gramanl)
"src/gramanl/ml/grammarStructure.cmx": for-pack(Gramanl)
"src/gramanl/ml/grammarTreeParser.cmx": for-pack(Gramanl)
"src/gramanl/ml/grammarType.cmx": for-pack(Gramanl)
"src/gramanl/ml/grammarUtil.cmx": for-pack(Gramanl)
"src/gramanl/ml/ids.cmx": for-pack(Gramanl)
"src/gramanl/ml/itemList.cmx": for-pack(Gramanl)
"src/gramanl/ml/itemSet.cmx": for-pack(Gramanl)
"src/gramanl/ml/lrItem.cmx": for-pack(Gramanl)
"src/gramanl/ml/lrItemSets.cmx": for-pack(Gramanl)
"src/gramanl/ml/merge.cmx": for-pack(Gramanl)
"src/gramanl/ml/nonterminal.cmx": for-pack(Gramanl)
"src/gramanl/ml/nonterminalSet.cmx": for-pack(Gramanl)
"src/gramanl/ml/ntArray.cmx": for-pack(Gramanl)
"src/gramanl/ml/ntSet.cmx": for-pack(Gramanl)
"src/gramanl/ml/options.cmx": for-pack(Gramanl)
"src/gramanl/ml/outputMenhir.cmx": for-pack(Gramanl)
"src/gramanl/ml/printAnalysisEnv.cmx": for-pack(Gramanl)
"src/gramanl/ml/printAst.cmx": for-pack(Gramanl)
"src/gramanl/ml/printGrammar.cmx": for-pack(Gramanl)
"src/gramanl/ml/prodArray.cmx": for-pack(Gramanl)
"src/gramanl/ml/ptreeMaker.cmx": for-pack(Gramanl)
"src/gramanl/ml/ptreeStructure.cmx": for-pack(Gramanl)
"src/gramanl/ml/ptreeType.cmx": for-pack(Gramanl)
"src/gramanl/ml/reachability.cmx": for-pack(Gramanl)
"src/gramanl/ml/renumbering.cmx": for-pack(Gramanl)
"src/gramanl/ml/sampleInput.cmx": for-pack(Gramanl)
"src/gramanl/ml/semantic.cmx": for-pack(Gramanl)
"src/gramanl/ml/semanticVariant.cmx": for-pack(Gramanl)
"src/gramanl/ml/stateGraph.cmx": for-pack(Gramanl)
"src/gramanl/ml/superSets.cmx": for-pack(Gramanl)
"src/gramanl/ml/tableConstruction.cmx": for-pack(Gramanl)
"src/gramanl/ml/tableEncoding.cmx": for-pack(Gramanl)
"src/gramanl/ml/tablePrinting.cmx": for-pack(Gramanl)
"src/gramanl/ml/termArray.cmx": for-pack(Gramanl)
"src/gramanl/ml/termSet.cmx": for-pack(Gramanl)
"src/gramanl/ml/terminal.cmx": for-pack(Gramanl)
"src/gramanl/ml/terminalSet.cmx": for-pack(Gramanl)
"src/gramanl/ml/warnings.cmx": for-pack(Gramanl)
<src/gramanl/*.ml{,i}>: use_glr
<src/gramanl/*.ml{,i}>: use_codegen
<src/gramanl/*.ml{,i}>: use_baselib
<src/gramanl/*.ml{,i}>: pkg_unix
<src/gramanl/*.ml{,i}>: pkg_batteries
<src/gramanl/*.ml{,i}>: pkg_camlp4
<src/gramanl/*.ml{,i}>: pkg_camlp4.lib
<src/gramanl/*.ml{,i}>: pkg_sexplib
<src/gramanl/*.ml{,i}>: pkg_ocamlgraph
<src/gramanl/ml/*.ml{,i}>: use_glr
<src/gramanl/ml/*.ml{,i}>: use_codegen
<src/gramanl/ml/*.ml{,i}>: use_baselib
<src/gramanl/ml/*.ml{,i}>: pkg_unix
<src/gramanl/ml/*.ml{,i}>: pkg_batteries
<src/gramanl/ml/*.ml{,i}>: pkg_camlp4
<src/gramanl/ml/*.ml{,i}>: pkg_camlp4.lib
<src/gramanl/ml/*.ml{,i}>: pkg_sexplib
<src/gramanl/ml/*.ml{,i}>: pkg_ocamlgraph
# Executable elkhound
"src/elkhound/elkhound.native": use_gramanl
"src/elkhound/elkhound.native": use_glr
"src/elkhound/elkhound.native": use_codegen
"src/elkhound/elkhound.native": use_baselib
"src/elkhound/elkhound.native": pkg_unix
"src/elkhound/elkhound.native": pkg_batteries
"src/elkhound/elkhound.native": pkg_camlp4
"src/elkhound/elkhound.native": pkg_camlp4.lib
"src/elkhound/elkhound.native": pkg_sexplib
"src/elkhound/elkhound.native": pkg_ocamlgraph
<src/elkhound/*.ml{,i}>: use_gramanl
<src/elkhound/*.ml{,i}>: use_glr
<src/elkhound/*.ml{,i}>: use_codegen
<src/elkhound/*.ml{,i}>: use_baselib
<src/elkhound/*.ml{,i}>: pkg_unix
<src/elkhound/*.ml{,i}>: pkg_batteries
<src/elkhound/*.ml{,i}>: pkg_camlp4
<src/elkhound/*.ml{,i}>: pkg_camlp4.lib
<src/elkhound/*.ml{,i}>: pkg_sexplib
<src/elkhound/*.ml{,i}>: pkg_ocamlgraph
# Executable treematch
"src/treematch/treematch.native": use_baselib
"src/treematch/treematch.native": pkg_batteries
"src/treematch/treematch.native": pkg_camlp4
"src/treematch/treematch.native": pkg_camlp4.lib
"src/treematch/treematch.native": pkg_sexplib
<src/treematch/*.ml{,i}>: use_baselib
<src/treematch/*.ml{,i}>: pkg_batteries
<src/treematch/*.ml{,i}>: pkg_camlp4
<src/treematch/*.ml{,i}>: pkg_camlp4.lib
<src/treematch/*.ml{,i}>: pkg_sexplib
# Executable re2ml
"src/re2ml/re2ml.native": oasis_executable_re2ml_native
<src/re2ml/*.ml{,i}>: oasis_executable_re2ml_native
"src/re2ml/re2ml.native": use_codegen
"src/re2ml/re2ml.native": use_baselib
"src/re2ml/re2ml.native": pkg_batteries
"src/re2ml/re2ml.native": pkg_camlp4
"src/re2ml/re2ml.native": pkg_camlp4.lib
"src/re2ml/re2ml.native": pkg_sexplib
<src/re2ml/*.ml{,i}>: use_codegen
<src/re2ml/*.ml{,i}>: use_baselib
<src/re2ml/*.ml{,i}>: pkg_batteries
<src/re2ml/*.ml{,i}>: pkg_camlp4
<src/re2ml/*.ml{,i}>: pkg_camlp4.lib
<src/re2ml/*.ml{,i}>: pkg_sexplib
# Library testing
"src/testing/testing.cmxs": use_testing
<src/testing/*.ml{,i}>: use_baselib
<src/testing/*.ml{,i}>: pkg_unix
<src/testing/*.ml{,i}>: pkg_batteries
<src/testing/*.ml{,i}>: pkg_sexplib
# Executable runtests
"testsuite/runtests.native": use_testing
"testsuite/runtests.native": use_baselib
"testsuite/runtests.native": pkg_unix
"testsuite/runtests.native": pkg_batteries
"testsuite/runtests.native": pkg_sexplib
<testsuite/*.ml{,i}>: use_testing
<testsuite/*.ml{,i}>: use_baselib
<testsuite/*.ml{,i}>: pkg_unix
<testsuite/*.ml{,i}>: pkg_batteries
<testsuite/*.ml{,i}>: pkg_sexplib
# OASIS_STOP

true: debug
true: use_menhir
true: annot
"testsuite": -traverse
"wip": -traverse
