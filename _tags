# OASIS_START
# DO NOT EDIT (digest: 4bbcc29ad08bc6892f8c9a33d27e12a9)
# Ignore VCS directories, you can use the same kind of rule outside 
# OASIS_START/STOP if you want to exclude directories that contains 
# useless stuff for the build process
<**/.svn>: -traverse
<**/.svn>: not_hygienic
".bzr": -traverse
".bzr": not_hygienic
".hg": -traverse
".hg": not_hygienic
".git": -traverse
".git": not_hygienic
"_darcs": -traverse
"_darcs": not_hygienic
# Library cabs
"src/cabs/cabs.cmxs": use_cabs
"src/cabs/ast.cmx": for-pack(Cabs)
"src/cabs/constant.cmx": for-pack(Cabs)
"src/cabs/sclass.cmx": for-pack(Cabs)
"src/cabs/tqual.cmx": for-pack(Cabs)
<src/cabs/*.ml{,i}>: pkg_batteries
<src/cabs/*.ml{,i}>: pkg_sexplib
# Library ccabs
"src/ccabs/ccabs.cmxs": use_ccabs
"src/ccabs/ast.cmx": for-pack(Ccabs)
"src/ccabs/disambiguation.cmx": for-pack(Ccabs)
"src/ccabs/flags.cmx": for-pack(Ccabs)
"src/ccabs/query.cmx": for-pack(Ccabs)
<src/ccabs/*.ml{,i}>: pkg_batteries
<src/ccabs/*.ml{,i}>: pkg_sexplib
<src/ccabs/*.ml{,i}>: pkg_monad
# Library baselib
"src/baselib/baselib.cmxs": use_baselib
"src/baselib/baselib.cmxa": oasis_library_baselib_cclib
"src/baselib/libbaselib_stubs.lib": oasis_library_baselib_cclib
"src/baselib/dllbaselib_stubs.dll": oasis_library_baselib_cclib
"src/baselib/libbaselib_stubs.a": oasis_library_baselib_cclib
"src/baselib/dllbaselib_stubs.so": oasis_library_baselib_cclib
"src/baselib/baselib.cmxa": use_libbaselib_stubs
<src/baselib/*.ml{,i}>: pkg_batteries
<src/baselib/*.ml{,i}>: pkg_sexplib
"src/baselib/ml_BitSet.c": pkg_batteries
"src/baselib/ml_BitSet.c": pkg_sexplib
"src/baselib/ml_Sched.c": pkg_batteries
"src/baselib/ml_Sched.c": pkg_sexplib
"src/baselib/ml_Valgrind.c": pkg_batteries
"src/baselib/ml_Valgrind.c": pkg_sexplib
"src/baselib/ml_Zlib.c": pkg_batteries
"src/baselib/ml_Zlib.c": pkg_sexplib
# Library glr
"src/glr/glr.cmxs": use_glr
"src/glr/arraystack.cmx": for-pack(Glr)
"src/glr/easy.cmx": for-pack(Glr)
"src/glr/glrEngine.cmx": for-pack(Glr)
"src/glr/glrOptions.cmx": for-pack(Glr)
"src/glr/lexerint.cmx": for-pack(Glr)
"src/glr/objpool.cmx": for-pack(Glr)
"src/glr/parseTables.cmx": for-pack(Glr)
"src/glr/parseTablesType.cmx": for-pack(Glr)
"src/glr/ptreeActions.cmx": for-pack(Glr)
"src/glr/ptreeNode.cmx": for-pack(Glr)
"src/glr/tokenInfo.cmx": for-pack(Glr)
"src/glr/userActions.cmx": for-pack(Glr)
<src/glr/*.ml{,i}>: use_baselib
<src/glr/*.ml{,i}>: pkg_batteries
<src/glr/*.ml{,i}>: pkg_sexplib
# Executable sless
"testsuite/elkhound/scannerless/sless.native": use_glr
"testsuite/elkhound/scannerless/sless.native": use_baselib
"testsuite/elkhound/scannerless/sless.native": pkg_batteries
"testsuite/elkhound/scannerless/sless.native": pkg_sexplib
<testsuite/elkhound/scannerless/*.ml{,i}>: use_glr
<testsuite/elkhound/scannerless/*.ml{,i}>: use_baselib
<testsuite/elkhound/scannerless/*.ml{,i}>: pkg_batteries
<testsuite/elkhound/scannerless/*.ml{,i}>: pkg_sexplib
# Executable arith
"testsuite/elkhound/arith/arith.native": use_glr
"testsuite/elkhound/arith/arith.native": use_baselib
"testsuite/elkhound/arith/arith.native": pkg_batteries
"testsuite/elkhound/arith/arith.native": pkg_sexplib
<testsuite/elkhound/arith/*.ml{,i}>: use_glr
<testsuite/elkhound/arith/*.ml{,i}>: use_baselib
<testsuite/elkhound/arith/*.ml{,i}>: pkg_batteries
<testsuite/elkhound/arith/*.ml{,i}>: pkg_sexplib
# Library ccparse
"src/ccparse/ccparse.cmxs": use_ccparse
"src/ccparse/cc_keywords.cmx": for-pack(Ccparse)
"src/ccparse/factory.cmx": for-pack(Ccparse)
"src/ccparse/lexer.cmx": for-pack(Ccparse)
"src/ccparse/parser.cmx": for-pack(Ccparse)
"src/ccparse/options.cmx": for-pack(Ccparse)
<src/ccparse/*.ml{,i}>: use_ccabs
<src/ccparse/*.ml{,i}>: use_glr
<src/ccparse/*.ml{,i}>: use_baselib
<src/ccparse/*.ml{,i}>: pkg_batteries
<src/ccparse/*.ml{,i}>: pkg_sexplib
<src/ccparse/*.ml{,i}>: pkg_unix
<src/ccparse/*.ml{,i}>: pkg_monad
<src/ccparse/gr/*.ml{,i}>: use_ccabs
<src/ccparse/gr/*.ml{,i}>: use_glr
<src/ccparse/gr/*.ml{,i}>: use_baselib
<src/ccparse/gr/*.ml{,i}>: pkg_batteries
<src/ccparse/gr/*.ml{,i}>: pkg_sexplib
<src/ccparse/gr/*.ml{,i}>: pkg_unix
<src/ccparse/gr/*.ml{,i}>: pkg_monad
# Executable cpapa
"src/cpapa/cpapa.native": use_ccparse
"src/cpapa/cpapa.native": use_ccabs
"src/cpapa/cpapa.native": use_glr
"src/cpapa/cpapa.native": use_baselib
"src/cpapa/cpapa.native": pkg_batteries
"src/cpapa/cpapa.native": pkg_sexplib
"src/cpapa/cpapa.native": pkg_unix
"src/cpapa/cpapa.native": pkg_monad
<src/cpapa/*.ml{,i}>: use_ccparse
<src/cpapa/*.ml{,i}>: use_ccabs
<src/cpapa/*.ml{,i}>: use_glr
<src/cpapa/*.ml{,i}>: use_baselib
<src/cpapa/*.ml{,i}>: pkg_batteries
<src/cpapa/*.ml{,i}>: pkg_sexplib
<src/cpapa/*.ml{,i}>: pkg_unix
<src/cpapa/*.ml{,i}>: pkg_monad
# Library gramanl
"src/gramanl/gramanl.cmxs": use_gramanl
"src/gramanl/analysisEnv.cmx": for-pack(Gramanl)
"src/gramanl/analysisEnvType.cmx": for-pack(Gramanl)
"src/gramanl/assoc.cmx": for-pack(Gramanl)
"src/gramanl/backTransform.cmx": for-pack(Gramanl)
"src/gramanl/bfsTree.cmx": for-pack(Gramanl)
"src/gramanl/camlAst.cmx": for-pack(Gramanl)
"src/gramanl/codegenHelpers.cmx": for-pack(Gramanl)
"src/gramanl/conflictResolution.cmx": for-pack(Gramanl)
"src/gramanl/derivability.cmx": for-pack(Gramanl)
"src/gramanl/diagnostics.cmx": for-pack(Gramanl)
"src/gramanl/dottedProduction.cmx": for-pack(Gramanl)
"src/gramanl/emitActions.cmx": for-pack(Gramanl)
"src/gramanl/emitCode.cmx": for-pack(Gramanl)
"src/gramanl/emitNames.cmx": for-pack(Gramanl)
"src/gramanl/emitPtree.cmx": for-pack(Gramanl)
"src/gramanl/emitTables.cmx": for-pack(Gramanl)
"src/gramanl/emitTokens.cmx": for-pack(Gramanl)
"src/gramanl/emitTreematch.cmx": for-pack(Gramanl)
"src/gramanl/firstSets.cmx": for-pack(Gramanl)
"src/gramanl/followSets.cmx": for-pack(Gramanl)
"src/gramanl/grammarAnalysis.cmx": for-pack(Gramanl)
"src/gramanl/grammarAst.cmx": for-pack(Gramanl)
"src/gramanl/grammarGraph.cmx": for-pack(Gramanl)
"src/gramanl/grammarLexer.cmx": for-pack(Gramanl)
"src/gramanl/grammarParser.cmx": for-pack(Gramanl)
"src/gramanl/grammarTreeParser.cmx": for-pack(Gramanl)
"src/gramanl/grammarType.cmx": for-pack(Gramanl)
"src/gramanl/grammarUtil.cmx": for-pack(Gramanl)
"src/gramanl/itemList.cmx": for-pack(Gramanl)
"src/gramanl/itemSet.cmx": for-pack(Gramanl)
"src/gramanl/lrItem.cmx": for-pack(Gramanl)
"src/gramanl/lrItemSets.cmx": for-pack(Gramanl)
"src/gramanl/merge.cmx": for-pack(Gramanl)
"src/gramanl/nonterminal.cmx": for-pack(Gramanl)
"src/gramanl/ntArray.cmx": for-pack(Gramanl)
"src/gramanl/options.cmx": for-pack(Gramanl)
"src/gramanl/outputMenhir.cmx": for-pack(Gramanl)
"src/gramanl/printAnalysisEnv.cmx": for-pack(Gramanl)
"src/gramanl/printAst.cmx": for-pack(Gramanl)
"src/gramanl/printGrammar.cmx": for-pack(Gramanl)
"src/gramanl/prodArray.cmx": for-pack(Gramanl)
"src/gramanl/ptreeMaker.cmx": for-pack(Gramanl)
"src/gramanl/reachability.cmx": for-pack(Gramanl)
"src/gramanl/renumbering.cmx": for-pack(Gramanl)
"src/gramanl/sampleInput.cmx": for-pack(Gramanl)
"src/gramanl/stateGraph.cmx": for-pack(Gramanl)
"src/gramanl/stateId.cmx": for-pack(Gramanl)
"src/gramanl/superSets.cmx": for-pack(Gramanl)
"src/gramanl/tableConstruction.cmx": for-pack(Gramanl)
"src/gramanl/tableEncoding.cmx": for-pack(Gramanl)
"src/gramanl/tablePrinting.cmx": for-pack(Gramanl)
"src/gramanl/termArray.cmx": for-pack(Gramanl)
"src/gramanl/terminal.cmx": for-pack(Gramanl)
"src/gramanl/terminalSet.cmx": for-pack(Gramanl)
"src/gramanl/warnings.cmx": for-pack(Gramanl)
<src/gramanl/*.ml{,i}>: use_glr
<src/gramanl/*.ml{,i}>: use_baselib
<src/gramanl/*.ml{,i}>: pkg_camlp4
<src/gramanl/*.ml{,i}>: pkg_camlp4.lib
<src/gramanl/*.ml{,i}>: pkg_batteries
<src/gramanl/*.ml{,i}>: pkg_sexplib
<src/gramanl/*.ml{,i}>: pkg_unix
<src/gramanl/*.ml{,i}>: pkg_ulex
<src/gramanl/*.ml{,i}>: pkg_ocamlgraph
# Executable elkhound
"src/elkhound/elkhound.native": use_gramanl
"src/elkhound/elkhound.native": use_glr
"src/elkhound/elkhound.native": use_baselib
"src/elkhound/elkhound.native": pkg_camlp4
"src/elkhound/elkhound.native": pkg_camlp4.lib
"src/elkhound/elkhound.native": pkg_batteries
"src/elkhound/elkhound.native": pkg_sexplib
"src/elkhound/elkhound.native": pkg_unix
"src/elkhound/elkhound.native": pkg_menhirLib
"src/elkhound/elkhound.native": pkg_ulex
"src/elkhound/elkhound.native": pkg_ocamlgraph
<src/elkhound/*.ml{,i}>: use_gramanl
<src/elkhound/*.ml{,i}>: use_glr
<src/elkhound/*.ml{,i}>: use_baselib
<src/elkhound/*.ml{,i}>: pkg_camlp4
<src/elkhound/*.ml{,i}>: pkg_camlp4.lib
<src/elkhound/*.ml{,i}>: pkg_batteries
<src/elkhound/*.ml{,i}>: pkg_sexplib
<src/elkhound/*.ml{,i}>: pkg_unix
<src/elkhound/*.ml{,i}>: pkg_menhirLib
<src/elkhound/*.ml{,i}>: pkg_ulex
<src/elkhound/*.ml{,i}>: pkg_ocamlgraph
# Executable runtests
"testsuite/runtests.native": use_baselib
"testsuite/runtests.native": pkg_batteries
"testsuite/runtests.native": pkg_sexplib
"testsuite/runtests.native": pkg_unix
<testsuite/*.ml{,i}>: use_baselib
<testsuite/*.ml{,i}>: pkg_batteries
<testsuite/*.ml{,i}>: pkg_sexplib
<testsuite/*.ml{,i}>: pkg_unix
# Executable treematch
"src/treematch/treematch.native": use_baselib
"src/treematch/treematch.native": pkg_camlp4
"src/treematch/treematch.native": pkg_camlp4.lib
"src/treematch/treematch.native": pkg_batteries
"src/treematch/treematch.native": pkg_sexplib
<src/treematch/*.ml{,i}>: use_baselib
<src/treematch/*.ml{,i}>: pkg_camlp4
<src/treematch/*.ml{,i}>: pkg_camlp4.lib
<src/treematch/*.ml{,i}>: pkg_batteries
<src/treematch/*.ml{,i}>: pkg_sexplib
# OASIS_STOP

true: debug
true: use_menhir
true: annot
"testsuite": -traverse
"wip": -traverse
