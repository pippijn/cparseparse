# OASIS_START
# DO NOT EDIT (digest: 26d34373220ce5c0174e40dbb0c58b9d)
# Ignore VCS directories, you can use the same kind of rule outside 
# OASIS_START/STOP if you want to exclude directories that contains 
# useless stuff for the build process
<**/.svn>: -traverse
<**/.svn>: not_hygienic
".bzr": -traverse
".bzr": not_hygienic
".hg": -traverse
".hg": not_hygienic
".git": -traverse
".git": not_hygienic
"_darcs": -traverse
"_darcs": not_hygienic
# Library baselib
"baselib/baselib.cmxs": use_baselib
"baselib/baselib.cmxa": oasis_library_baselib_cclib
"baselib/libbaselib_stubs.lib": oasis_library_baselib_cclib
"baselib/dllbaselib_stubs.dll": oasis_library_baselib_cclib
"baselib/libbaselib_stubs.a": oasis_library_baselib_cclib
"baselib/dllbaselib_stubs.so": oasis_library_baselib_cclib
"baselib/baselib.cmxa": use_libbaselib_stubs
<baselib/*.ml{,i}>: pkg_sexplib
<baselib/*.ml{,i}>: pkg_batteries
"baselib/ml_BitSet.c": pkg_sexplib
"baselib/ml_BitSet.c": pkg_batteries
"baselib/ml_Sched.c": pkg_sexplib
"baselib/ml_Sched.c": pkg_batteries
"baselib/ml_Valgrind.c": pkg_sexplib
"baselib/ml_Valgrind.c": pkg_batteries
"baselib/ml_Zlib.c": pkg_sexplib
"baselib/ml_Zlib.c": pkg_batteries
# Library glr
"glr/glr.cmxs": use_glr
"glr/arraystack.cmx": for-pack(Glr)
"glr/glrEngine.cmx": for-pack(Glr)
"glr/lexerint.cmx": for-pack(Glr)
"glr/objpool.cmx": for-pack(Glr)
"glr/parseTables.cmx": for-pack(Glr)
"glr/parseTablesType.cmx": for-pack(Glr)
"glr/ptreeActions.cmx": for-pack(Glr)
"glr/ptreeNode.cmx": for-pack(Glr)
"glr/userActions.cmx": for-pack(Glr)
<glr/*.ml{,i}>: use_baselib
<glr/*.ml{,i}>: pkg_sexplib
<glr/*.ml{,i}>: pkg_batteries
# Library ccparse
"ccparse/ccparse.cmxs": use_ccparse
"ccparse/cc_keywords.cmx": for-pack(Ccparse)
"ccparse/lexer.cmx": for-pack(Ccparse)
"ccparse/parser.cmx": for-pack(Ccparse)
"ccparse/options.cmx": for-pack(Ccparse)
<ccparse/*.ml{,i}>: use_glr
<ccparse/*.ml{,i}>: use_baselib
<ccparse/*.ml{,i}>: pkg_sexplib
<ccparse/*.ml{,i}>: pkg_batteries
<ccparse/*.ml{,i}>: pkg_unix
<ccparse/gr/*.ml{,i}>: use_glr
<ccparse/gr/*.ml{,i}>: use_baselib
<ccparse/gr/*.ml{,i}>: pkg_sexplib
<ccparse/gr/*.ml{,i}>: pkg_batteries
<ccparse/gr/*.ml{,i}>: pkg_unix
# Executable cpapa
"cpapa/cpapa.native": use_ccparse
"cpapa/cpapa.native": use_glr
"cpapa/cpapa.native": use_baselib
"cpapa/cpapa.native": pkg_sexplib
"cpapa/cpapa.native": pkg_batteries
"cpapa/cpapa.native": pkg_unix
<cpapa/*.ml{,i}>: use_ccparse
<cpapa/*.ml{,i}>: use_glr
<cpapa/*.ml{,i}>: use_baselib
<cpapa/*.ml{,i}>: pkg_sexplib
<cpapa/*.ml{,i}>: pkg_batteries
<cpapa/*.ml{,i}>: pkg_unix
# Library grammar
"grammar/grammar.cmxs": use_grammar
"grammar/analysisEnv.cmx": for-pack(Grammar)
"grammar/analysisEnvType.cmx": for-pack(Grammar)
"grammar/assoc.cmx": for-pack(Grammar)
"grammar/bfsTree.cmx": for-pack(Grammar)
"grammar/camlAst.cmx": for-pack(Grammar)
"grammar/codegenHelpers.cmx": for-pack(Grammar)
"grammar/conflictResolution.cmx": for-pack(Grammar)
"grammar/derivability.cmx": for-pack(Grammar)
"grammar/diagnostics.cmx": for-pack(Grammar)
"grammar/dottedProduction.cmx": for-pack(Grammar)
"grammar/emitActions.cmx": for-pack(Grammar)
"grammar/emitCode.cmx": for-pack(Grammar)
"grammar/emitPtree.cmx": for-pack(Grammar)
"grammar/emitTables.cmx": for-pack(Grammar)
"grammar/emitTokens.cmx": for-pack(Grammar)
"grammar/firstSets.cmx": for-pack(Grammar)
"grammar/followSets.cmx": for-pack(Grammar)
"grammar/grammarAnalysis.cmx": for-pack(Grammar)
"grammar/grammarAst.cmx": for-pack(Grammar)
"grammar/grammarGraph.cmx": for-pack(Grammar)
"grammar/grammarLexer.cmx": for-pack(Grammar)
"grammar/grammarParser.cmx": for-pack(Grammar)
"grammar/grammarTreeParser.cmx": for-pack(Grammar)
"grammar/grammarType.cmx": for-pack(Grammar)
"grammar/grammarUtil.cmx": for-pack(Grammar)
"grammar/itemList.cmx": for-pack(Grammar)
"grammar/itemSet.cmx": for-pack(Grammar)
"grammar/lrItem.cmx": for-pack(Grammar)
"grammar/lrItemSets.cmx": for-pack(Grammar)
"grammar/merge.cmx": for-pack(Grammar)
"grammar/options.cmx": for-pack(Grammar)
"grammar/outputMenhir.cmx": for-pack(Grammar)
"grammar/printAnalysisEnv.cmx": for-pack(Grammar)
"grammar/printAst.cmx": for-pack(Grammar)
"grammar/printGrammar.cmx": for-pack(Grammar)
"grammar/ptreeMaker.cmx": for-pack(Grammar)
"grammar/reachability.cmx": for-pack(Grammar)
"grammar/renumbering.cmx": for-pack(Grammar)
"grammar/stateGraph.cmx": for-pack(Grammar)
"grammar/superSets.cmx": for-pack(Grammar)
"grammar/tableConstruction.cmx": for-pack(Grammar)
"grammar/tableEncoding.cmx": for-pack(Grammar)
"grammar/tablePrinting.cmx": for-pack(Grammar)
"grammar/terminal.cmx": for-pack(Grammar)
"grammar/terminalSet.cmx": for-pack(Grammar)
"grammar/warnings.cmx": for-pack(Grammar)
<grammar/*.ml{,i}>: use_glr
<grammar/*.ml{,i}>: use_baselib
<grammar/*.ml{,i}>: pkg_sexplib
<grammar/*.ml{,i}>: pkg_camlp4
<grammar/*.ml{,i}>: pkg_camlp4.lib
<grammar/*.ml{,i}>: pkg_batteries
<grammar/*.ml{,i}>: pkg_unix
<grammar/*.ml{,i}>: pkg_ulex
<grammar/*.ml{,i}>: pkg_ocamlgraph
# Executable elkhound
"elkhound/elkhound.native": use_grammar
"elkhound/elkhound.native": use_glr
"elkhound/elkhound.native": use_baselib
"elkhound/elkhound.native": pkg_sexplib
"elkhound/elkhound.native": pkg_camlp4
"elkhound/elkhound.native": pkg_camlp4.lib
"elkhound/elkhound.native": pkg_batteries
"elkhound/elkhound.native": pkg_unix
"elkhound/elkhound.native": pkg_menhirLib
"elkhound/elkhound.native": pkg_ulex
"elkhound/elkhound.native": pkg_ocamlgraph
<elkhound/*.ml{,i}>: use_grammar
<elkhound/*.ml{,i}>: use_glr
<elkhound/*.ml{,i}>: use_baselib
<elkhound/*.ml{,i}>: pkg_sexplib
<elkhound/*.ml{,i}>: pkg_camlp4
<elkhound/*.ml{,i}>: pkg_camlp4.lib
<elkhound/*.ml{,i}>: pkg_batteries
<elkhound/*.ml{,i}>: pkg_unix
<elkhound/*.ml{,i}>: pkg_menhirLib
<elkhound/*.ml{,i}>: pkg_ulex
<elkhound/*.ml{,i}>: pkg_ocamlgraph
# Executable runtests
"testsuite/runtests.native": use_baselib
"testsuite/runtests.native": pkg_sexplib
"testsuite/runtests.native": pkg_batteries
"testsuite/runtests.native": pkg_unix
<testsuite/*.ml{,i}>: use_baselib
<testsuite/*.ml{,i}>: pkg_sexplib
<testsuite/*.ml{,i}>: pkg_batteries
<testsuite/*.ml{,i}>: pkg_unix
# Executable treematch
"treematch/treematch.native": use_baselib
"treematch/treematch.native": pkg_sexplib
"treematch/treematch.native": pkg_camlp4
"treematch/treematch.native": pkg_camlp4.lib
"treematch/treematch.native": pkg_batteries
<treematch/*.ml{,i}>: use_baselib
<treematch/*.ml{,i}>: pkg_sexplib
<treematch/*.ml{,i}>: pkg_camlp4
<treematch/*.ml{,i}>: pkg_camlp4.lib
<treematch/*.ml{,i}>: pkg_batteries
# OASIS_STOP

true: debug
true: use_menhir
true: annot
"testsuite": -traverse
"wip": -traverse
