(* expected statistics *)
option shift_reduce_conflicts 3;
option reduce_reduce_conflicts 18;


(* decltype *)
nonterm DeclSpecifier {
  -> te:DecltypeTypeSpecifier m2:UberModifierSeqOpt 
	[Decltype] {
	  let m = m2 in
	  {
	    dflags = Flags.dflags_of_modifiers m;
	    spec = TS_typeof (
	      Flags.cv_of_modifiers m,
	      te);
	    decllist = [];
	  }
	}

  -> m1:UberModifierSeq te:DecltypeTypeSpecifier m2:UberModifierSeqOpt
	[ModDecltype] {
	  let m = m1 @ m2 in
	  {
	    dflags = Flags.dflags_of_modifiers m;
	    spec = TS_typeof (
	      Flags.cv_of_modifiers m,
	      te);
	    decllist = [];
	  }
	}
}


nonterm TypeSpecifier {
  -> te:DecltypeTypeSpecifier cv2:UberCVQualifierSeqOpt
	[Decltype] { unimplemented 1013 }
  -> cv1:UberCVQualifierSeq te:DecltypeTypeSpecifier cv2:UberCVQualifierSeqOpt
	[ModDecltype] { unimplemented 1014 }
}


nonterm DecltypeTypeSpecifier {
  fun merge(l,r) { TO_ambig (l, r) }

  -> e:DecltypeExpr	[DeclTypeExpr]	{ TO_expr (e) }
  -> t:DecltypeType	[DeclTypeType]	{ TO_type (t) }
}


nonterm DecltypeExpr {
  -> "decltype" "(" e:Expression ")"
	{ FullExpression (e) }
}

nonterm DecltypeType {
  -> "decltype" "(" t:TypeId ")";
}


(* nullptr *)
nonterm Literal {
  -> "nullptr"			[Nullptr] { unimplemented 1020 }
}

(* new character types *)
nonterm SimpleTypeSpecifier {
  -> "char16_t"			[Char16T] { unimplemented 248 }
  -> "char32_t"			[Char32T] { unimplemented 248 }
}

(* constexpr *)
nonterm(modifier) UberModifier {
  -> "constexpr"		[Constexpr] { unimplemented 248 }
}

nonterm CDtorModifier {
  (* TODO: this gives 19 RR conflicts *)
  -> "constexpr"		[Constexpr] { unimplemented 248 }
}

(* noexcept *)
nonterm UnaryExpression {
  -> e:NoexceptExpression	[NoExcept] { unimplemented 1021 }
}

nonterm NoexceptExpression {
  -> "noexcept" "(" e:ParenthesizedExpression ")"
	{ unimplemented 1022 }
}

nonterm ExceptionSpecification {
  -> NoexceptSpecification
	[NoExcept] { unimplemented 1023 }
}

nonterm NoexceptSpecification {
  -> "noexcept"
	{ unimplemented 1024 }
}

(* variadic templates *)
nonterm TemplateParameterList {
  (* non-template type parameter *)
  -> next:TemplateParameterListContinuation
     ClassOrTypename "..." i:IdentifierOpt t:DefaultTypeOpt
	[Variadic] { unimplemented 1025 }

  (* template type parameter *)
  -> next:TemplateParameterListContinuation
     "template" "<" pl:TemplateParameterList ">" "class" "..." i:IdentifierOpt
	[VariadicTemplate] { unimplemented 1026 }
}

nonterm TypeSpecifier {
  -> base:TypeSpecifier "..."
	[UnpackVarArg] { unimplemented 511 }
}

nonterm PrimaryExpression {
  -> e:PrimaryExpression "..."
	[UnpackVarArg] { unimplemented 513 }
}

nonterm UnaryExpression {
  (* size of expression *)
  -> "sizeof" "..." e:UnaryExpression	[VarargSizeofExpr]	{ E_sizeofExpr (e) }
  (* size of type *)
  -> "sizeof" "..." "(" t:TypeId ")"	[VarargSizeofType]	{ E_sizeofType (t) }
}

(* Initialiser lists. *)
(*
nonterm PrimaryExpression {
  -> i:CompoundInitialiser
	[InitialiserList] { unimplemented 512 }
}
*)

(* rvalue references *)
(*
nonterm PrefixDeclarator {
  -> "&&" cv:CVQualifierSeqOpt { cv }
}
*)
