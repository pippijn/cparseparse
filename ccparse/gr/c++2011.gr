// expected statistics
option shift_reduce_conflicts 3;
option reduce_reduce_conflicts 18;


// decltype
nonterm DeclSpecifier {
  -> te:DecltypeTypeSpecifier m2:UberModifierSeqOpt { () }
  -> m1:UberModifierSeq te:DecltypeTypeSpecifier m2:UberModifierSeqOpt { () }
}


nonterm TypeSpecifier {
  -> te:DecltypeTypeSpecifier cv2:UberCVQualifierSeqOpt { () }
  -> cv1:UberCVQualifierSeq te:DecltypeTypeSpecifier cv2:UberCVQualifierSeqOpt { () }
}


nonterm DecltypeTypeSpecifier {
  fun merge(l,r) { unimplemented 0 }

  -> e:DecltypeExpr [DeclTypeExpr];
  -> t:DecltypeType [DeclTypeType];
}


nonterm DecltypeExpr {
  -> "decltype" "(" e:Expression ")";
       
}

nonterm DecltypeType {
  -> "decltype" "(" t:TypeId ")";
}


// nullptr
nonterm Literal {
  -> "nullptr" { () }
}

// new character types
nonterm SimpleTypeSpecifier {
  -> "char16_t"      [Char16T] { unimplemented 248 }
  -> "char32_t"      [Char32T] { unimplemented 248 }
}

// constexpr
nonterm UberModifier {
  -> "constexpr"     [Constexpr] { unimplemented 248 }
}

nonterm CDtorModifier {
  // TODO: this gives 19 RR conflicts
  -> "constexpr"     [Constexpr] { unimplemented 248 }
}

// noexcept
nonterm UnaryExpression {
  -> e:NoexceptExpression [NoExcept];
}

nonterm NoexceptExpression {
  -> "noexcept" "(" e:ParenthesizedExpression ")";
}

nonterm ExceptionSpecification {
  -> s:NoexceptSpecification;
}

nonterm NoexceptSpecification {
  -> "noexcept" [NoExcept] { () }
}

// variadic templates
nonterm TypeParameter {
  // non-template type parameter
  -> ClassOrTypename "..." i:IdentifierOpt t:DefaultTypeOpt { () }

  // template type parameter
  -> "template" "<" pl:TemplateParameterList ">" "class" "..." i:IdentifierOpt { () }
}

nonterm TemplateArgument {
  -> typeid:TypeId "..."
     { unimplemented 511 }
}

// rvalue references
/*
nonterm PrefixDeclarator {
  -> "&&" cv:CVQualifierSeqOpt { cv }
}
*/
